// ‚úÖ Fonction pour exporter les donn√©es d'un store IndexedDB
async function exportDataFromIndexedDB(dbName, storeName) {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open(dbName);

        request.onsuccess = (event) => {
            const db = event.target.result;
            console.log(`üìÇ Stores disponibles dans "${dbName}" :`, db.objectStoreNames);

            // üìå V√©rifie si le store demand√© existe
            if (!db.objectStoreNames.contains(storeName)) {
                return reject(`‚ö†Ô∏è Le store "${storeName}" n'existe pas dans la base de donn√©es "${dbName}".`);
            }

            const transaction = db.transaction(storeName, 'readonly');
            const objectStore = transaction.objectStore(storeName);
            const data = [];

            objectStore.openCursor().onsuccess = (event) => {
                const cursor = event.target.result;
                if (cursor) {
                    data.push(cursor.value);
                    cursor.continue();
                } else {
                    resolve(data); // ‚úÖ Retourne les donn√©es sous forme de tableau JSON
                }
            };

            transaction.onerror = (event) => {
                reject('‚ùå Erreur lors de l\'exportation des donn√©es : ' + event.target.error);
            };
        };

        request.onerror = (event) => {
            reject('‚ùå Erreur lors de l\'ouverture de la base de donn√©es : ' + event.target.error);
        };
    });
}

// ‚úÖ Fonction pour exporter toutes les donn√©es de plusieurs stores
async function exportAllData() {
    const dbStores = {
        "videoDB": "videos",
        "audioDB": "audios",
        "monjournaldebordDB": ["fichiersDB", "journalDB"]
    };

    let allData = {};

    for (let dbName in dbStores) {
        let stores = dbStores[dbName];
        if (!Array.isArray(stores)) {
            stores = [stores];
        }

        for (let storeName of stores) {
            try {
                console.log(`üì§ Exportation depuis "${dbName}" -> "${storeName}"...`);
                allData[`${dbName}_${storeName}`] = await exportDataFromIndexedDB(dbName, storeName);
            } catch (error) {
                console.error(`‚ö†Ô∏è Erreur lors de l'export depuis "${dbName}" -> "${storeName}" :`, error);
            }
        }
    }

    return JSON.stringify(allData); // üìÇ Retourne toutes les donn√©es en JSON
}

// ‚úÖ Fonction pour t√©l√©verser les donn√©es vers Dropbox
async function uploadToDropbox(accessToken, data, fileName) {
    const dbx = new Dropbox.Dropbox({ accessToken: accessToken });
    try {
        const response = await dbx.filesUpload({
            path: '/ToxDetect Backup/' + fileName,
            contents: new Blob([data], { type: 'application/json' }), // üõ†Ô∏è Correction ici
            mode: 'overwrite'
        });
        console.log('‚úÖ Fichier t√©l√©vers√© avec succ√®s :', response.name);
    } catch (error) {
        console.error('‚ùå Erreur lors du t√©l√©versement du fichier :', error);
    }
}

// ‚úÖ Fonction principale pour exporter vers Dropbox
async function exportDataToDropbox() {
    try {
        const data = await exportAllData(); // üîÑ R√©cup√®re toutes les donn√©es
        const accessToken = localStorage.getItem('dropboxToken'); // üìå V√©rification du token
        if (accessToken) {
            await uploadToDropbox(accessToken, data, "backup.json"); // üì§ Envoie √† Dropbox
            alert("‚úÖ Les fichiers ont √©t√© transf√©r√©s vers votre Dropbox !");
               }
    } catch (error) {
        console.error("‚ùå Erreur de transfert :", error);
        alert("Une erreur est survenue lors du transfert des fichiers.");
    }
}

// Ex√©cuter automatiquement le transfert des donn√©es vers Dropbox au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
    exportDataToDropbox();
});
